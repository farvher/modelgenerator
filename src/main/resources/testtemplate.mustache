package com.cobiscorp.messagetransformation;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import java.io.Serializable;
import java.util.Collection;
import java.util.Set;
import javax.validation.*;
import org.junit.Test;
import java.text.MessageFormat;
import com.cobiscorp.accl.messagetransformation.bsl.dto.*;
import com.cobiscorp.accl.messagetransformation.bsl.impl.*;
import com.cobiscorp.messagetransformation.bsl.dto.CanonicalReceiveOrder;


/**
 * Test cases for ACCL Messages
 *
 * @author Cobiscorp
 */
public class {{className}} {

    private static final String VIOLATIONS_MUST_BE_EMPTY = "Violations must be empty";


     {{#tests}}
     /**
        * Test case validate ACCL Messages {@link {{&dtoName}} }
        *
        */
     @Test
     public void {{&textName}} {
         long startTime = System.currentTimeMillis();

        {{dtoName}} tmpDto = {{dtoName}}.new{{dtoName}}()
                        {{#properties}}
                            {{&.}}
                        {{/properties}}
                        .build();

        assertTrue(VIOLATIONS_MUST_BE_EMPTY, validateMessage(tmpDto).isEmpty());

        //transformation
        {{&transformation}};
        assertTrue(VIOLATIONS_MUST_BE_EMPTY, validateMessage(transformation).isEmpty());

        //asserts values
        {{#asserts}}
        {{&.}}
        {{/asserts}}

        long endTime = System.currentTimeMillis();
        long duration = (endTime - startTime);
        System.out.println(MessageFormat.format("{{&textName}} time execution : {0} milliseconds", duration));

     }
     {{/tests}}

	private <T> Collection<ConstraintViolation<T>> validateMessage(T acclMessage) {
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		Validator validator = factory.getValidator();
		Set<ConstraintViolation<T>> violations = validator.validate(acclMessage);
		for (ConstraintViolation<T> v : violations) {
			System.out.println(v.getMessage());
		}
		return violations;

	}



}